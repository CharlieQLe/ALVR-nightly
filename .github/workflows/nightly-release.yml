name: Release nightly

env:
  CARGO_TERM_COLOR: always

on:
  workflow_dispatch:
  schedule:
    - cron: "0 22 * * *"

jobs:
  prepare_release:
    runs-on: windows-latest
    outputs:
      release_ref: ${{ steps.gen_tag.outputs.release_ref }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
      - uses: actions/checkout@v2
        with:
          repository: "alvr-org/ALVR"
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Generate tag, set release ref
        id: gen_tag
        env:
          RUST_BACKTRACE: 1
        run: |
          $out = cargo xtask bump-versions --nightly
          echo $out
          echo "::set-output name=version_tag::$(echo $out | sls -CaseSensitive -Pattern '^v.*$')"
          echo "::set-output name=release_ref::$(git rev-parse HEAD)"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # Release tag is taken from the gen_tag job.
          tag_name: ${{ steps.gen_tag.outputs.version_tag }}
          release_name: ALVR ${{ steps.gen_tag.outputs.version_tag }}
          # TODO: gather commit messages to post here in the body
          body: |
            Nightly release of ALVR: ${{ steps.gen_tag.outputs.version_tag }}
            Generated from commit: alvr-org/ALVR@${{ steps.gen_tag.outputs.release_ref }}
          draft: true
          prerelease: false

  build_windows_server:
    # Windows latest has Rust, Android NDK and LLVM already installed.
    # https://github.com/actions/virtual-environments/blob/main/images/win/Windows2019-Readme.md
    runs-on: windows-latest
    needs: [prepare_release]
    env:
      # For bindgen to find libclang.dll, we need to give it the path to the Visual Studio package.
      # This is specific to the GitHub windows-latest runner.
      LIBCLANG_PATH: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\Llvm\x64\bin'
    steps:
      - uses: actions/checkout@v2
        with:
          repository: "alvr-org/ALVR"
          ref: ${{ needs.prepare_release.outputs.release_ref }}
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Download WiX 3.14 binaries
        run: |
          Invoke-WebRequest http://static.wixtoolset.org/releases/v3.14.0.4118/wix314-binaries.zip -OutFile wix314-binaries.zip
          Expand-Archive -Path wix314-binaries.zip -DestinationPath wix314-binaries/bin

      - name: Build and package ALVR
        id: build
        env:
          WIX: "wix314-binaries"
          RUST_BACKTRACE: 1
        run: |
          cargo xtask bump-versions --nightly
          cargo xtask publish-server --nightly --gpl
          $file = Get-ChildItem -Name .\build\*.exe | Select-Object -f 1
          echo "::set-output name=exe_filename::$file"

      # Upload artifacts
      - name: Upload installer
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare_release.outputs.upload_url }}
          asset_path: ./build/${{ steps.build.outputs.exe_filename }}
          asset_name: ${{ steps.build.outputs.exe_filename }}
          asset_content_type: application/octet-stream
      - name: Upload portable server
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare_release.outputs.upload_url }}
          asset_path: ./build/alvr_server_windows.zip
          asset_name: alvr_server_windows.zip
          asset_content_type: application/zip
      - name: Upload server .pdb
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare_release.outputs.upload_url }}
          asset_path: ./build/alvr_server.pdb
          asset_name: alvr_server.pdb
          asset_content_type: application/octet-stream

  build_ubuntu_server:
    runs-on: ubuntu-latest
    needs: [prepare_release]
    steps:
      - uses: actions/checkout@v2
        with:
          repository: "alvr-org/ALVR"
          ref: ${{ needs.prepare_release.outputs.release_ref }}
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Build and install FFmpeg
        env:
          RUST_BACKTRACE: 1
        run: |
          sudo apt update
          sudo apt install build-essential pkg-config nasm libva-dev libdrm-dev libvulkan-dev libx264-dev libx265-dev cmake libasound2-dev libgtk-3-dev libunwind-dev libffmpeg-nvenc-dev nvidia-cuda-toolkit
          cp packaging/deb/cuda.pc /usr/share/pkgconfig
          cargo xtask build-ffmpeg-linux
          cd deps/linux/FFmpeg-n4.4 && sudo make install && cd ../../..

      - name: Build and package ALVR
        env:
          RUST_BACKTRACE: 1
        run: |
          sudo apt install build-essential pkg-config libasound2-dev libjack-dev libgtk-3-dev libvulkan-dev libunwind-dev libxcb-composite0-dev
          cargo xtask bump-versions --nightly
          cargo xtask publish-server --nightly
          mv build/alvr_server_linux.zip build/alvr_server_ubuntu_20_04.zip

      - name: Upload portable server
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare_release.outputs.upload_url }}
          asset_path: ./build/alvr_server_ubuntu_20_04.zip
          asset_name: alvr_server_ubuntu_20_04.zip
          asset_content_type: application/zip

  build_android_client:
    # Windows latest has Rust, Android NDK and LLVM already installed.
    # https://github.com/actions/virtual-environments/blob/main/images/win/Windows2019-Readme.md
    runs-on: windows-latest
    needs: [prepare_release]
    env:
      # For bindgen to find libclang.dll, we need to give it the path to the Visual Studio package.
      # This is specific to the GitHub windows-latest runner.
      LIBCLANG_PATH: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\Llvm\x64\bin'
    steps:
      - uses: actions/checkout@v2
        with:
          repository: "alvr-org/ALVR"
          ref: ${{ needs.prepare_release.outputs.release_ref }}
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: aarch64-linux-android
          override: true
      - uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Set better Android SDK path (workaround for rust-android-gradle)
        shell: cmd
        run: mklink /J "%GITHUB_WORKSPACE%\android-sdk" "%ANDROID_SDK_ROOT%"

      - name: Build dependencies
        env:
          RUST_BACKTRACE: 1
        run: cargo xtask build-android-deps

      - name: Build and package ALVR (.apk)
        id: build
        env:
          ANDROID_HOME: '${{ github.workspace }}\android-sdk'
          ANDROID_SDK_ROOT: '${{ github.workspace }}\android-sdk'
          RUST_BACKTRACE: 1
        run: |
          cargo xtask bump-versions --nightly
          cargo xtask publish-client --nightly

      - name: Sign Oculus Quest APK
        uses: r0adkll/sign-android-release@v1
        id: sign_quest
        with:
          releaseDirectory: build/alvr_client_oculus_quest
          signingKeyBase64: ${{ secrets.SIGNING_KEY }}
          alias: ${{ secrets.KEY_ALIAS }}
          keyStorePassword: ${{ secrets.KEY_STORE_PASSWORD }}
          keyPassword: ${{ secrets.KEY_PASSWORD }}
      - name: Sign Oculus Go APK
        uses: r0adkll/sign-android-release@v1
        id: sign_go
        with:
          releaseDirectory: build/alvr_client_oculus_go
          signingKeyBase64: ${{ secrets.SIGNING_KEY }}
          alias: ${{ secrets.KEY_ALIAS }}
          keyStorePassword: ${{ secrets.KEY_STORE_PASSWORD }}
          keyPassword: ${{ secrets.KEY_PASSWORD }}

      # Upload artifacts
      - name: Upload client for Oculus Quest
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare_release.outputs.upload_url }}
          asset_path: ${{steps.sign_quest.outputs.signedReleaseFile}}
          asset_name: alvr_client_oculus_quest.apk
          asset_content_type: application/vnd.android.package-archive
      - name: Upload client for Oculus Go
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare_release.outputs.upload_url }}
          asset_path: ${{steps.sign_go.outputs.signedReleaseFile}}
          asset_name: alvr_client_oculus_go.apk
          asset_content_type: application/vnd.android.package-archive

  publish_release:
    runs-on: ubuntu-latest
    needs:
      [
        prepare_release,
        build_windows_server,
        build_ubuntu_server,
        build_android_client,
      ]
    steps:
      - uses: eregon/publish-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_id: ${{ needs.prepare_release.outputs.release_id }}
